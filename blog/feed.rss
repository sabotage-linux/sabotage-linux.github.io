<?xml version="1.0"?>
<rss version="2.0">
<channel>
<title>Devs on Acid</title>
<link>http://sabotage-linux.github.io</link>
<description>Random rants of a linux distribution developer</description>
<language>en</language>
<item><title>Thread cancellation and resource leaks</title>
<guid>http://sabotage-linux.github.io/2</guid>
<pubDate>21 Sep 2012 02:00 GMT</pubDate>
<description><![CDATA[
<p>In a multi-threaded C program where threads share address space and
may be operating on shared objects as long as they use the proper
synchronization tools, it's unsafe to asynchronously kill an
individual thread without killing the whole process. Stale locks may
be left behind and data being modified under those locks may be in an
inconsistent state. This includes even internal heap management
structures used by <code>malloc</code>.</p>

<p>As such, the POSIX threads standard does not even offer a mechanism
for forcible termination of individual threads. Instead, it offers
<em>thread cancellation</em>, a mechanism by which early termination of a
thread whose work is no longer needed can be negotiated in such a way
that the thread to be cancelled cleans up any shared state and/or
private resources it may be using before it terminates.
...</p>
]]></description></item>
<item><title>Introducing EWONTFIX</title>
<guid>http://sabotage-linux.github.io/1</guid>
<pubDate>22 Sep 2012 22:47 GMT</pubDate>
<description><![CDATA[
<p>Welcome to EWONTFIX, a blog about, well, bugs. Especially longstanding
unfixed ones in C code for Linux or Unix-like systems. The idea for
this blog grew out of conversations during the development of <a href="http://www.musl-libc.org">musl
libc</a>. Aside from the fact that longstanding
bugs in glibc were one of the original motivations for musl, it turns
out that developing a libc leads to spending a lot of time building
and testing applications. And in the process of testing, one ends up
reading a lot of source. And a lot of source is appallingly bad.</p>

<p>Most low-quality source code just isn't that interesting to write
about. It's more just a matter of identifying the problems, submitting
them to bug trackers, and following up until somebody fixes things.
However there are also a good deal of cases where buggy code <em>is</em>
interesting to discuss. These fall mostly under two major categories:
...</p>
]]></description></item>
</channel></rss>
