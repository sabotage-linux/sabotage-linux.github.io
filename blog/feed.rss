<?xml version="1.0"?>
<rss version="2.0">
<channel>
<title>Devs on Acid</title>
<link>https://sabotage-linux.github.io</link>
<description>Random rants of a linux distribution developer</description>
<language>en</language>
<item><title>how compatible is libreSSL ?</title>
<guid>https://sabotage-linux.github.io/blog/2</guid>
<pubDate>12 Jul 2014</pubDate>
<description><![CDATA[
<h4>portability</h4>

<p>yesterday the "portable" version of libressl was released.
http://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-2.0.0.tar.gz</p>

<p>i set up a package in <a href="https://github.com/sabotage-linux/sabotage">sabotage linux</a>,
and went on a voyage to investigate whether the full set of packages can be
used with libressl instead of openssl.</p>

<p>first of all, i had to fight some obstacles to get libressl compiling though...
aa</p>

<h5>obstacle 1 - -Werror</h5>

<p>...</p>
]]></description></item>
<item><title>sqlite's anal gamation</title>
<guid>https://sabotage-linux.github.io/blog/1</guid>
<pubDate>25 Sep 2013</pubDate>
<description><![CDATA[
<p>sqlite's slogan: <strong>"Small. Fast. Reliable. Choose any three."</strong></p>

<p>i always wondered though, how such a small or "lite" package can take such a
considerable amount of time to build.</p>

<p>as the main author of the sabotage linux distribution, building software is my
daily bread, so i own a pretty fast build box.
it's an 8 core machine with 3.1 GHz, which builds a complete 3.11 linux kernel
in less than 5 minutes, making use of all 8 cores via the nice parallel build
feature of GNU make.</p>

<pre><code>make -j8
</code></pre>

<p>when invoking make like this, it first determines the dependencies between the
...</p>
]]></description></item>
</channel></rss>
